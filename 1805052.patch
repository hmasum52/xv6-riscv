diff --git a/Makefile b/Makefile
index 39a99d7..73f14e6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..4c8cce0 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             getFreeMemorySize(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+// my system call
+int            trace(int); // param is system_call_num
+int            sysinfo(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..01b38fd 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,25 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+/**
+ * @brief calculate the free memory in bytes
+ * from free list.
+ * kernel maintains a linked-list (named freelist ) of free memory pages in
+ * kernel/kalloc.c in the kmem struct
+ *
+ * @return size of the free memory in bytes
+ */
+int
+getFreeMemorySize(void)
+{
+  struct run *r;
+  int n = 0;
+
+  acquire(&kmem.lock);
+  for(r = kmem.freelist; r; r = r->next)
+    n += PGSIZE;
+  release(&kmem.lock);
+
+  return n;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..a9fdf62 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -299,6 +299,9 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+  // copy system number for trace
+  np->sys_call_number = p->sys_call_number;
+
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -681,3 +684,32 @@ procdump(void)
     printf("\n");
   }
 }
+
+// trace(sys_call_num): system call
+int
+trace(int sys_call_num){
+  struct proc *currentProc = myproc();
+  currentProc->sys_call_number = sys_call_num;
+  return 0;
+}
+
+// system call
+int
+sysinfo(void){
+  printf("\n\nsysinfo system call prints:\n");
+
+  // prints the number of free memory available in the system in bytes
+  printf("free-memory: %d\n", getFreeMemorySize());
+
+  // calculate the number of existing processes in the current system
+  int nproc = 0;
+  struct proc *p = myproc(); // current proccess
+  for(p = proc; p < &proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      nproc++;
+    }
+  }
+  // prints the number of existing processes in the current system
+  printf("nproc: %d\n\n", nproc);
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..5f38371 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int sys_call_number;         // remember which system call process wants to trace
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f6dcd94 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,40 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+// my system calls
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
-static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+static struct{
+  uint64 (*func)(void); // pointer to system function
+  char* name;
+} syscalls[] = {
+    [SYS_fork]    {sys_fork, "fork"},
+    [SYS_exit]    {sys_exit ,"exit"},
+    [SYS_wait]    {sys_wait, "wait"},
+    [SYS_pipe]    {sys_pipe, "pipe"},
+    [SYS_read]    {sys_read, "read"},
+    [SYS_kill]    {sys_kill, "kill"},
+    [SYS_exec]    {sys_exec, "exec"},
+    [SYS_fstat]   {sys_fstat, "fstat"},
+    [SYS_chdir]   {sys_chdir, "chdir"},
+    [SYS_dup]     {sys_dup,"dup"},
+    [SYS_getpid]  {sys_getpid, "getpid"},
+    [SYS_sbrk]    {sys_sbrk, "sbrk"},
+    [SYS_sleep]   {sys_sleep, "sleep"},
+    [SYS_uptime]  {sys_uptime, "uptime"},
+    [SYS_open]    {sys_open, "open"},
+    [SYS_write]   {sys_write, "write"},
+    [SYS_mknod]   {sys_mknod, "mknod"},
+    [SYS_unlink]  {sys_unlink, "unlink"},
+    [SYS_link]    {sys_link ,"link"},
+    [SYS_mkdir]   {sys_mkdir, "mkdir"},
+    [SYS_close]   {sys_close, "close"},
+    // my system calls
+    [SYS_trace]   {sys_trace, "trace"},
+    [SYS_sysinfo] {sys_sysinfo, "sysinfo"},
 };
 
 void
@@ -135,13 +144,23 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num].func) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    p->trapframe->a0 = syscalls[num].func();
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
+
+  // trace
+  // check if the current system call's number is the same
+  // as the argument pass in the trace system
+  if (p->sys_call_number == num)
+  {
+    // print process id, the name of the system call and
+    // the return value of the current system call
+    printf("pid: %d, syscall: %s, return value: %d\n", p->pid, syscalls[num].name, p->trapframe->a0);
+  }
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cfab758 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+// my system calls
+#define SYS_trace  22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..4610f78 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// my system calls
+uint64
+sys_trace(void)
+{
+  int sysCallNum;
+  argint(0, &sysCallNum); // get the sysCallNum from the stack
+  trace(sysCallNum); // call the trace function
+  return 0;
+}
+
+uint64
+sys_sysinfo(void){
+  sysinfo();
+  return 0;
+}
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..25ade16
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+
+void
+sinfo() {
+  if (sysinfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.");
+    sinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.");
+  sinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..addd96c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+// my system calls
+int trace(int);
+int sysinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f7e817e 100644
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+# my system calls
+entry("trace");
+entry("sysinfo");
